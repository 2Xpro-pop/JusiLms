// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using JusiLms.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace JusiLms.Hello
{
    internal partial class UserEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "JusiLms.Models.User",
                typeof(User),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var accessFailedCount = runtimeEntityType.AddProperty(
                "AccessFailedCount",
                typeof(int),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("AccessFailedCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<AccessFailedCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            accessFailedCount.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"));
            accessFailedCount.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var avatar = runtimeEntityType.AddProperty(
                "Avatar",
                typeof(string),
                propertyInfo: typeof(User).GetProperty("Avatar", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(User).GetField("<Avatar>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            avatar.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            avatar.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var concurrencyStamp = runtimeEntityType.AddProperty(
                "ConcurrencyStamp",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("ConcurrencyStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<ConcurrencyStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true);
            concurrencyStamp.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            concurrencyStamp.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTime),
                propertyInfo: typeof(User).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(User).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createdAt.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v));
            createdAt.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var email = runtimeEntityType.AddProperty(
                "Email",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("Email", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<Email>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            email.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(256)",
                    size: 256));
            email.TypeMapping = ((NpgsqlStringTypeMapping)email.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        email.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var emailConfirmed = runtimeEntityType.AddProperty(
            "EmailConfirmed",
            typeof(bool),
            propertyInfo: typeof(IdentityUser<string>).GetProperty("EmailConfirmed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(IdentityUser<string>).GetField("<EmailConfirmed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            sentinel: false);
        emailConfirmed.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
            comparer: new ValueComparer<bool>(
                (bool v1, bool v2) => v1 == v2,
                (bool v) => v.GetHashCode(),
                (bool v) => v),
            keyComparer: new ValueComparer<bool>(
                (bool v1, bool v2) => v1 == v2,
                (bool v) => v.GetHashCode(),
                (bool v) => v),
            providerValueComparer: new ValueComparer<bool>(
                (bool v1, bool v2) => v1 == v2,
                (bool v) => v.GetHashCode(),
                (bool v) => v));
        emailConfirmed.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var fullName = runtimeEntityType.AddProperty(
            "FullName",
            typeof(string),
            propertyInfo: typeof(User).GetProperty("FullName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(User).GetField("<FullName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true);
        fullName.TypeMapping = StringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                dbType: System.Data.DbType.String));
        fullName.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var insta = runtimeEntityType.AddProperty(
            "Insta",
            typeof(string),
            propertyInfo: typeof(User).GetProperty("Insta", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(User).GetField("<Insta>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true);
        insta.TypeMapping = StringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                dbType: System.Data.DbType.String));
        insta.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var lastActivity = runtimeEntityType.AddProperty(
            "LastActivity",
            typeof(DateTime),
            propertyInfo: typeof(User).GetProperty("LastActivity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(User).GetField("<LastActivity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
        lastActivity.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
            comparer: new ValueComparer<DateTime>(
                (DateTime v1, DateTime v2) => v1.Equals(v2),
                (DateTime v) => v.GetHashCode(),
                (DateTime v) => v),
            keyComparer: new ValueComparer<DateTime>(
                (DateTime v1, DateTime v2) => v1.Equals(v2),
                (DateTime v) => v.GetHashCode(),
                (DateTime v) => v),
            providerValueComparer: new ValueComparer<DateTime>(
                (DateTime v1, DateTime v2) => v1.Equals(v2),
                (DateTime v) => v.GetHashCode(),
                (DateTime v) => v));
        lastActivity.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var lastModified = runtimeEntityType.AddProperty(
            "LastModified",
            typeof(DateTime?),
            propertyInfo: typeof(User).GetProperty("LastModified", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(User).GetField("<LastModified>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true);
        lastModified.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
            comparer: new ValueComparer<DateTime?>(
                (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
                (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
            keyComparer: new ValueComparer<DateTime?>(
                (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
                (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)),
            providerValueComparer: new ValueComparer<DateTime?>(
                (Nullable<DateTime> v1, Nullable<DateTime> v2) => v1.HasValue && v2.HasValue && (DateTime)v1 == (DateTime)v2 || !v1.HasValue && !v2.HasValue,
                (Nullable<DateTime> v) => v.HasValue ? ((DateTime)v).GetHashCode() : 0,
                (Nullable<DateTime> v) => v.HasValue ? (Nullable<DateTime>)(DateTime)v : default(Nullable<DateTime>)));
        lastModified.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var lockoutEnabled = runtimeEntityType.AddProperty(
            "LockoutEnabled",
            typeof(bool),
            propertyInfo: typeof(IdentityUser<string>).GetProperty("LockoutEnabled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(IdentityUser<string>).GetField("<LockoutEnabled>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            sentinel: false);
        lockoutEnabled.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
            comparer: new ValueComparer<bool>(
                (bool v1, bool v2) => v1 == v2,
                (bool v) => v.GetHashCode(),
                (bool v) => v),
            keyComparer: new ValueComparer<bool>(
                (bool v1, bool v2) => v1 == v2,
                (bool v) => v.GetHashCode(),
                (bool v) => v),
            providerValueComparer: new ValueComparer<bool>(
                (bool v1, bool v2) => v1 == v2,
                (bool v) => v.GetHashCode(),
                (bool v) => v));
        lockoutEnabled.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var lockoutEnd = runtimeEntityType.AddProperty(
            "LockoutEnd",
            typeof(DateTimeOffset?),
            propertyInfo: typeof(IdentityUser<string>).GetProperty("LockoutEnd", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(IdentityUser<string>).GetField("<LockoutEnd>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true);
        lockoutEnd.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
            comparer: new ValueComparer<DateTimeOffset?>(
                (Nullable<DateTimeOffset> v1, Nullable<DateTimeOffset> v2) => v1.HasValue && v2.HasValue && ((DateTimeOffset)v1).EqualsExact((DateTimeOffset)v2) || !v1.HasValue && !v2.HasValue,
                (Nullable<DateTimeOffset> v) => v.HasValue ? ((DateTimeOffset)v).GetHashCode() : 0,
                (Nullable<DateTimeOffset> v) => v.HasValue ? (Nullable<DateTimeOffset>)(DateTimeOffset)v : default(Nullable<DateTimeOffset>)),
            keyComparer: new ValueComparer<DateTimeOffset?>(
                (Nullable<DateTimeOffset> v1, Nullable<DateTimeOffset> v2) => v1.HasValue && v2.HasValue && ((DateTimeOffset)v1).EqualsExact((DateTimeOffset)v2) || !v1.HasValue && !v2.HasValue,
                (Nullable<DateTimeOffset> v) => v.HasValue ? ((DateTimeOffset)v).GetHashCode() : 0,
                (Nullable<DateTimeOffset> v) => v.HasValue ? (Nullable<DateTimeOffset>)(DateTimeOffset)v : default(Nullable<DateTimeOffset>)),
            providerValueComparer: new ValueComparer<DateTimeOffset?>(
                (Nullable<DateTimeOffset> v1, Nullable<DateTimeOffset> v2) => v1.HasValue && v2.HasValue && ((DateTimeOffset)v1).EqualsExact((DateTimeOffset)v2) || !v1.HasValue && !v2.HasValue,
                (Nullable<DateTimeOffset> v) => v.HasValue ? ((DateTimeOffset)v).GetHashCode() : 0,
                (Nullable<DateTimeOffset> v) => v.HasValue ? (Nullable<DateTimeOffset>)(DateTimeOffset)v : default(Nullable<DateTimeOffset>)),
            clrType: typeof(DateTimeOffset),
            jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping(typeof(DateTimeOffset)).JsonValueReaderWriter);
        lockoutEnd.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var normalizedEmail = runtimeEntityType.AddProperty(
            "NormalizedEmail",
            typeof(string),
            propertyInfo: typeof(IdentityUser<string>).GetProperty("NormalizedEmail", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(IdentityUser<string>).GetField("<NormalizedEmail>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true,
            maxLength: 256);
        normalizedEmail.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(256)",
                size: 256));
        normalizedEmail.TypeMapping = ((NpgsqlStringTypeMapping)normalizedEmail.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    normalizedEmail.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var normalizedUserName = runtimeEntityType.AddProperty(
        "NormalizedUserName",
        typeof(string),
        propertyInfo: typeof(IdentityUser<string>).GetProperty("NormalizedUserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(IdentityUser<string>).GetField("<NormalizedUserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        nullable: true,
        maxLength: 256);
    normalizedUserName.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
        comparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        keyComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        providerValueComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "character varying(256)",
            size: 256));
    normalizedUserName.TypeMapping = ((NpgsqlStringTypeMapping)normalizedUserName.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
normalizedUserName.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var passwordHash = runtimeEntityType.AddProperty(
    "PasswordHash",
    typeof(string),
    propertyInfo: typeof(User).GetProperty("PasswordHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(User).GetField("<PasswordHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
passwordHash.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
passwordHash.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var phoneNumber = runtimeEntityType.AddProperty(
    "PhoneNumber",
    typeof(string),
    propertyInfo: typeof(IdentityUser<string>).GetProperty("PhoneNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<string>).GetField("<PhoneNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
phoneNumber.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
phoneNumber.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var phoneNumberConfirmed = runtimeEntityType.AddProperty(
    "PhoneNumberConfirmed",
    typeof(bool),
    propertyInfo: typeof(IdentityUser<string>).GetProperty("PhoneNumberConfirmed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<string>).GetField("<PhoneNumberConfirmed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: false);
phoneNumberConfirmed.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
    comparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    keyComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    providerValueComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v));
phoneNumberConfirmed.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var securityStamp = runtimeEntityType.AddProperty(
    "SecurityStamp",
    typeof(string),
    propertyInfo: typeof(IdentityUser<string>).GetProperty("SecurityStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<string>).GetField("<SecurityStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
securityStamp.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
securityStamp.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var tg = runtimeEntityType.AddProperty(
    "Tg",
    typeof(string),
    propertyInfo: typeof(User).GetProperty("Tg", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(User).GetField("<Tg>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
tg.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
tg.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var twoFactorEnabled = runtimeEntityType.AddProperty(
    "TwoFactorEnabled",
    typeof(bool),
    propertyInfo: typeof(IdentityUser<string>).GetProperty("TwoFactorEnabled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<string>).GetField("<TwoFactorEnabled>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: false);
twoFactorEnabled.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
    comparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    keyComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    providerValueComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v));
twoFactorEnabled.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var userName = runtimeEntityType.AddProperty(
    "UserName",
    typeof(string),
    propertyInfo: typeof(IdentityUser<string>).GetProperty("UserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<string>).GetField("<UserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true,
    maxLength: 256);
userName.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(256)",
        size: 256));
userName.TypeMapping = ((NpgsqlStringTypeMapping)userName.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
userName.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var wa = runtimeEntityType.AddProperty(
    "Wa",
    typeof(string),
    propertyInfo: typeof(User).GetProperty("Wa", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(User).GetField("<Wa>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
wa.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
wa.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var key = runtimeEntityType.AddKey(
    new[] { id });
runtimeEntityType.SetPrimaryKey(key);

var index = runtimeEntityType.AddIndex(
    new[] { normalizedEmail });
index.AddAnnotation("Relational:Name", "EmailIndex");

var index0 = runtimeEntityType.AddIndex(
    new[] { normalizedUserName },
    unique: true);
index0.AddAnnotation("Relational:Name", "UserNameIndex");

return runtimeEntityType;
}

public static RuntimeSkipNavigation CreateSkipNavigation1(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
{
    var skipNavigation = declaringEntityType.AddSkipNavigation(
        "HomeWorks",
        targetEntityType,
        joinEntityType.FindForeignKey(
            new[] { joinEntityType.FindProperty("UsersId") },
            declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
            declaringEntityType),
        true,
        false,
        typeof(ICollection<HomeWork>),
        propertyInfo: typeof(User).GetProperty("HomeWorks", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(User).GetField("<HomeWorks>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

    var inverse = targetEntityType.FindSkipNavigation("Users");
    if (inverse != null)
    {
        skipNavigation.Inverse = inverse;
        inverse.Inverse = skipNavigation;
    }

    return skipNavigation;
}

public static RuntimeSkipNavigation CreateSkipNavigation2(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
{
    var skipNavigation = declaringEntityType.AddSkipNavigation(
        "Roles",
        targetEntityType,
        joinEntityType.FindForeignKey(
            new[] { joinEntityType.FindProperty("UsersId") },
            declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
            declaringEntityType),
        true,
        false,
        typeof(ICollection<Role>),
        propertyInfo: typeof(User).GetProperty("Roles", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(User).GetField("<Roles>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

    var inverse = targetEntityType.FindSkipNavigation("Users");
    if (inverse != null)
    {
        skipNavigation.Inverse = inverse;
        inverse.Inverse = skipNavigation;
    }

    return skipNavigation;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "AspNetUsers");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
