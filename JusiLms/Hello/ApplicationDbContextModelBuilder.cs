// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace JusiLms.Hello
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var homeWorkUser = HomeWorkUserEntityType.Create(this);
            var category = CategoryEntityType.Create(this);
            var homeWork = HomeWorkEntityType.Create(this);
            var lesson = LessonEntityType.Create(this);
            var role = RoleEntityType.Create(this);
            var user = UserEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);
            var roleUser = RoleUserEntityType.Create(this);

            HomeWorkUserEntityType.CreateForeignKey1(homeWorkUser, homeWork);
            HomeWorkUserEntityType.CreateForeignKey2(homeWorkUser, user);
            HomeWorkEntityType.CreateForeignKey1(homeWork, category);
            LessonEntityType.CreateForeignKey1(lesson, category);
            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, role);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, user);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, user);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, role);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, user);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, user);
            RoleUserEntityType.CreateForeignKey1(roleUser, role);
            RoleUserEntityType.CreateForeignKey2(roleUser, user);

            HomeWorkEntityType.CreateSkipNavigation1(homeWork, user, homeWorkUser);
            RoleEntityType.CreateSkipNavigation1(role, user, roleUser);
            UserEntityType.CreateSkipNavigation1(user, homeWork, homeWorkUser);
            UserEntityType.CreateSkipNavigation2(user, role, roleUser);

            HomeWorkUserEntityType.CreateAnnotations(homeWorkUser);
            CategoryEntityType.CreateAnnotations(category);
            HomeWorkEntityType.CreateAnnotations(homeWork);
            LessonEntityType.CreateAnnotations(lesson);
            RoleEntityType.CreateAnnotations(role);
            UserEntityType.CreateAnnotations(user);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);
            RoleUserEntityType.CreateAnnotations(roleUser);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var homeWorkUser = FindEntityType("HomeWorkUser")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            homeWorkUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var homeWorkUserTableBase = new TableBase("HomeWorkUser", null, relationalModel);
            var homeWorksIdColumnBase = new ColumnBase<ColumnMappingBase>("HomeWorksId", "uuid", homeWorkUserTableBase);
            homeWorkUserTableBase.Columns.Add("HomeWorksId", homeWorksIdColumnBase);
            var usersIdColumnBase = new ColumnBase<ColumnMappingBase>("UsersId", "text", homeWorkUserTableBase);
            homeWorkUserTableBase.Columns.Add("UsersId", usersIdColumnBase);
            relationalModel.DefaultTables.Add("HomeWorkUser", homeWorkUserTableBase);
            var homeWorkUserMappingBase = new TableMappingBase<ColumnMappingBase>(homeWorkUser, homeWorkUserTableBase, true);
            homeWorkUserTableBase.AddTypeMapping(homeWorkUserMappingBase, false);
            defaultTableMappings.Add(homeWorkUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)homeWorksIdColumnBase, homeWorkUser.FindProperty("HomeWorksId")!, homeWorkUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usersIdColumnBase, homeWorkUser.FindProperty("UsersId")!, homeWorkUserMappingBase);

            var tableMappings = new List<TableMapping>();
            homeWorkUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var homeWorkUserTable = new Table("HomeWorkUser", null, relationalModel);
            var homeWorksIdColumn = new Column("HomeWorksId", "uuid", homeWorkUserTable);
            homeWorkUserTable.Columns.Add("HomeWorksId", homeWorksIdColumn);
            var usersIdColumn = new Column("UsersId", "text", homeWorkUserTable);
            homeWorkUserTable.Columns.Add("UsersId", usersIdColumn);
            var pK_HomeWorkUser = new UniqueConstraint("PK_HomeWorkUser", homeWorkUserTable, new[] { homeWorksIdColumn, usersIdColumn });
            homeWorkUserTable.PrimaryKey = pK_HomeWorkUser;
            var pK_HomeWorkUserUc = RelationalModel.GetKey(this,
                "HomeWorkUser",
                new[] { "HomeWorksId", "UsersId" });
            pK_HomeWorkUser.MappedKeys.Add(pK_HomeWorkUserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_HomeWorkUserUc).Add(pK_HomeWorkUser);
            homeWorkUserTable.UniqueConstraints.Add("PK_HomeWorkUser", pK_HomeWorkUser);
            var iX_HomeWorkUser_UsersId = new TableIndex(
            "IX_HomeWorkUser_UsersId", homeWorkUserTable, new[] { usersIdColumn }, false);
            var iX_HomeWorkUser_UsersIdIx = RelationalModel.GetIndex(this,
                "HomeWorkUser",
                new[] { "UsersId" });
            iX_HomeWorkUser_UsersId.MappedIndexes.Add(iX_HomeWorkUser_UsersIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_HomeWorkUser_UsersIdIx).Add(iX_HomeWorkUser_UsersId);
            homeWorkUserTable.Indexes.Add("IX_HomeWorkUser_UsersId", iX_HomeWorkUser_UsersId);
            relationalModel.Tables.Add(("HomeWorkUser", null), homeWorkUserTable);
            var homeWorkUserTableMapping = new TableMapping(homeWorkUser, homeWorkUserTable, true);
            homeWorkUserTable.AddTypeMapping(homeWorkUserTableMapping, false);
            tableMappings.Add(homeWorkUserTableMapping);
            RelationalModel.CreateColumnMapping(homeWorksIdColumn, homeWorkUser.FindProperty("HomeWorksId")!, homeWorkUserTableMapping);
            RelationalModel.CreateColumnMapping(usersIdColumn, homeWorkUser.FindProperty("UsersId")!, homeWorkUserTableMapping);

            var category = FindEntityType("JusiLms.Models.Category")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var jusiLmsModelsCategoryTableBase = new TableBase("JusiLms.Models.Category", null, relationalModel);
            var colorColumnBase = new ColumnBase<ColumnMappingBase>("Color", "text", jusiLmsModelsCategoryTableBase);
            jusiLmsModelsCategoryTableBase.Columns.Add("Color", colorColumnBase);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "timestamp with time zone", jusiLmsModelsCategoryTableBase);
            jusiLmsModelsCategoryTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "text", jusiLmsModelsCategoryTableBase);
            jusiLmsModelsCategoryTableBase.Columns.Add("Description", descriptionColumnBase);
            var iconColumnBase = new ColumnBase<ColumnMappingBase>("Icon", "text", jusiLmsModelsCategoryTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsCategoryTableBase.Columns.Add("Icon", iconColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "uuid", jusiLmsModelsCategoryTableBase);
            jusiLmsModelsCategoryTableBase.Columns.Add("Id", idColumnBase);
            var lastModifiedColumnBase = new ColumnBase<ColumnMappingBase>("LastModified", "timestamp with time zone", jusiLmsModelsCategoryTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsCategoryTableBase.Columns.Add("LastModified", lastModifiedColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "text", jusiLmsModelsCategoryTableBase);
            jusiLmsModelsCategoryTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("JusiLms.Models.Category", jusiLmsModelsCategoryTableBase);
            var jusiLmsModelsCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, jusiLmsModelsCategoryTableBase, true);
            jusiLmsModelsCategoryTableBase.AddTypeMapping(jusiLmsModelsCategoryMappingBase, false);
            defaultTableMappings0.Add(jusiLmsModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, category.FindProperty("Id")!, jusiLmsModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)colorColumnBase, category.FindProperty("Color")!, jusiLmsModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, category.FindProperty("CreatedAt")!, jusiLmsModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, category.FindProperty("Description")!, jusiLmsModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iconColumnBase, category.FindProperty("Icon")!, jusiLmsModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastModifiedColumnBase, category.FindProperty("LastModified")!, jusiLmsModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, category.FindProperty("Name")!, jusiLmsModelsCategoryMappingBase);

            var tableMappings0 = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var categoriesTable = new Table("Categories", null, relationalModel);
            var idColumn = new Column("Id", "uuid", categoriesTable);
            categoriesTable.Columns.Add("Id", idColumn);
            var colorColumn = new Column("Color", "text", categoriesTable);
            categoriesTable.Columns.Add("Color", colorColumn);
            var createdAtColumn = new Column("CreatedAt", "timestamp with time zone", categoriesTable);
            categoriesTable.Columns.Add("CreatedAt", createdAtColumn);
            var descriptionColumn = new Column("Description", "text", categoriesTable);
            categoriesTable.Columns.Add("Description", descriptionColumn);
            var iconColumn = new Column("Icon", "text", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("Icon", iconColumn);
            var lastModifiedColumn = new Column("LastModified", "timestamp with time zone", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("LastModified", lastModifiedColumn);
            var nameColumn = new Column("Name", "text", categoriesTable);
            categoriesTable.Columns.Add("Name", nameColumn);
            var pK_Categories = new UniqueConstraint("PK_Categories", categoriesTable, new[] { idColumn });
            categoriesTable.PrimaryKey = pK_Categories;
            var pK_CategoriesUc = RelationalModel.GetKey(this,
                "JusiLms.Models.Category",
                new[] { "Id" });
            pK_Categories.MappedKeys.Add(pK_CategoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CategoriesUc).Add(pK_Categories);
            categoriesTable.UniqueConstraints.Add("PK_Categories", pK_Categories);
            relationalModel.Tables.Add(("Categories", null), categoriesTable);
            var categoriesTableMapping = new TableMapping(category, categoriesTable, true);
            categoriesTable.AddTypeMapping(categoriesTableMapping, false);
            tableMappings0.Add(categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, category.FindProperty("Id")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(colorColumn, category.FindProperty("Color")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, category.FindProperty("CreatedAt")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, category.FindProperty("Description")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(iconColumn, category.FindProperty("Icon")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(lastModifiedColumn, category.FindProperty("LastModified")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, category.FindProperty("Name")!, categoriesTableMapping);

            var homeWork = FindEntityType("JusiLms.Models.HomeWork")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            homeWork.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var jusiLmsModelsHomeWorkTableBase = new TableBase("JusiLms.Models.HomeWork", null, relationalModel);
            var categoryIdColumnBase = new ColumnBase<ColumnMappingBase>("CategoryId", "uuid", jusiLmsModelsHomeWorkTableBase);
            jusiLmsModelsHomeWorkTableBase.Columns.Add("CategoryId", categoryIdColumnBase);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "timestamp with time zone", jusiLmsModelsHomeWorkTableBase);
            jusiLmsModelsHomeWorkTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var detailsColumnBase = new ColumnBase<ColumnMappingBase>("Details", "text", jusiLmsModelsHomeWorkTableBase);
            jusiLmsModelsHomeWorkTableBase.Columns.Add("Details", detailsColumnBase);
            var difficultyColumnBase = new ColumnBase<ColumnMappingBase>("Difficulty", "integer", jusiLmsModelsHomeWorkTableBase);
            jusiLmsModelsHomeWorkTableBase.Columns.Add("Difficulty", difficultyColumnBase);
            var headerColumnBase = new ColumnBase<ColumnMappingBase>("Header", "text", jusiLmsModelsHomeWorkTableBase);
            jusiLmsModelsHomeWorkTableBase.Columns.Add("Header", headerColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "uuid", jusiLmsModelsHomeWorkTableBase);
            jusiLmsModelsHomeWorkTableBase.Columns.Add("Id", idColumnBase0);
            var lastModifiedColumnBase0 = new ColumnBase<ColumnMappingBase>("LastModified", "timestamp with time zone", jusiLmsModelsHomeWorkTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsHomeWorkTableBase.Columns.Add("LastModified", lastModifiedColumnBase0);
            relationalModel.DefaultTables.Add("JusiLms.Models.HomeWork", jusiLmsModelsHomeWorkTableBase);
            var jusiLmsModelsHomeWorkMappingBase = new TableMappingBase<ColumnMappingBase>(homeWork, jusiLmsModelsHomeWorkTableBase, true);
            jusiLmsModelsHomeWorkTableBase.AddTypeMapping(jusiLmsModelsHomeWorkMappingBase, false);
            defaultTableMappings1.Add(jusiLmsModelsHomeWorkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, homeWork.FindProperty("Id")!, jusiLmsModelsHomeWorkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryIdColumnBase, homeWork.FindProperty("CategoryId")!, jusiLmsModelsHomeWorkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, homeWork.FindProperty("CreatedAt")!, jusiLmsModelsHomeWorkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)detailsColumnBase, homeWork.FindProperty("Details")!, jusiLmsModelsHomeWorkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)difficultyColumnBase, homeWork.FindProperty("Difficulty")!, jusiLmsModelsHomeWorkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)headerColumnBase, homeWork.FindProperty("Header")!, jusiLmsModelsHomeWorkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastModifiedColumnBase0, homeWork.FindProperty("LastModified")!, jusiLmsModelsHomeWorkMappingBase);

            var tableMappings1 = new List<TableMapping>();
            homeWork.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var homeWorksTable = new Table("HomeWorks", null, relationalModel);
            var idColumn0 = new Column("Id", "uuid", homeWorksTable);
            homeWorksTable.Columns.Add("Id", idColumn0);
            var categoryIdColumn = new Column("CategoryId", "uuid", homeWorksTable);
            homeWorksTable.Columns.Add("CategoryId", categoryIdColumn);
            var createdAtColumn0 = new Column("CreatedAt", "timestamp with time zone", homeWorksTable);
            homeWorksTable.Columns.Add("CreatedAt", createdAtColumn0);
            var detailsColumn = new Column("Details", "text", homeWorksTable);
            homeWorksTable.Columns.Add("Details", detailsColumn);
            var difficultyColumn = new Column("Difficulty", "integer", homeWorksTable);
            homeWorksTable.Columns.Add("Difficulty", difficultyColumn);
            var headerColumn = new Column("Header", "text", homeWorksTable);
            homeWorksTable.Columns.Add("Header", headerColumn);
            var lastModifiedColumn0 = new Column("LastModified", "timestamp with time zone", homeWorksTable)
            {
                IsNullable = true
            };
            homeWorksTable.Columns.Add("LastModified", lastModifiedColumn0);
            var pK_HomeWorks = new UniqueConstraint("PK_HomeWorks", homeWorksTable, new[] { idColumn0 });
            homeWorksTable.PrimaryKey = pK_HomeWorks;
            var pK_HomeWorksUc = RelationalModel.GetKey(this,
                "JusiLms.Models.HomeWork",
                new[] { "Id" });
            pK_HomeWorks.MappedKeys.Add(pK_HomeWorksUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_HomeWorksUc).Add(pK_HomeWorks);
            homeWorksTable.UniqueConstraints.Add("PK_HomeWorks", pK_HomeWorks);
            var iX_HomeWorks_CategoryId = new TableIndex(
            "IX_HomeWorks_CategoryId", homeWorksTable, new[] { categoryIdColumn }, false);
            var iX_HomeWorks_CategoryIdIx = RelationalModel.GetIndex(this,
                "JusiLms.Models.HomeWork",
                new[] { "CategoryId" });
            iX_HomeWorks_CategoryId.MappedIndexes.Add(iX_HomeWorks_CategoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_HomeWorks_CategoryIdIx).Add(iX_HomeWorks_CategoryId);
            homeWorksTable.Indexes.Add("IX_HomeWorks_CategoryId", iX_HomeWorks_CategoryId);
            relationalModel.Tables.Add(("HomeWorks", null), homeWorksTable);
            var homeWorksTableMapping = new TableMapping(homeWork, homeWorksTable, true);
            homeWorksTable.AddTypeMapping(homeWorksTableMapping, false);
            tableMappings1.Add(homeWorksTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, homeWork.FindProperty("Id")!, homeWorksTableMapping);
            RelationalModel.CreateColumnMapping(categoryIdColumn, homeWork.FindProperty("CategoryId")!, homeWorksTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, homeWork.FindProperty("CreatedAt")!, homeWorksTableMapping);
            RelationalModel.CreateColumnMapping(detailsColumn, homeWork.FindProperty("Details")!, homeWorksTableMapping);
            RelationalModel.CreateColumnMapping(difficultyColumn, homeWork.FindProperty("Difficulty")!, homeWorksTableMapping);
            RelationalModel.CreateColumnMapping(headerColumn, homeWork.FindProperty("Header")!, homeWorksTableMapping);
            RelationalModel.CreateColumnMapping(lastModifiedColumn0, homeWork.FindProperty("LastModified")!, homeWorksTableMapping);

            var lesson = FindEntityType("JusiLms.Models.Lesson")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            lesson.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var jusiLmsModelsLessonTableBase = new TableBase("JusiLms.Models.Lesson", null, relationalModel);
            var categoryIdColumnBase0 = new ColumnBase<ColumnMappingBase>("CategoryId", "uuid", jusiLmsModelsLessonTableBase);
            jusiLmsModelsLessonTableBase.Columns.Add("CategoryId", categoryIdColumnBase0);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "timestamp with time zone", jusiLmsModelsLessonTableBase);
            jusiLmsModelsLessonTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "text", jusiLmsModelsLessonTableBase);
            jusiLmsModelsLessonTableBase.Columns.Add("Description", descriptionColumnBase0);
            var headerColumnBase0 = new ColumnBase<ColumnMappingBase>("Header", "text", jusiLmsModelsLessonTableBase);
            jusiLmsModelsLessonTableBase.Columns.Add("Header", headerColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "uuid", jusiLmsModelsLessonTableBase);
            jusiLmsModelsLessonTableBase.Columns.Add("Id", idColumnBase1);
            var lastModifiedColumnBase1 = new ColumnBase<ColumnMappingBase>("LastModified", "timestamp with time zone", jusiLmsModelsLessonTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsLessonTableBase.Columns.Add("LastModified", lastModifiedColumnBase1);
            var youtubeUrlColumnBase = new ColumnBase<ColumnMappingBase>("YoutubeUrl", "text", jusiLmsModelsLessonTableBase);
            jusiLmsModelsLessonTableBase.Columns.Add("YoutubeUrl", youtubeUrlColumnBase);
            relationalModel.DefaultTables.Add("JusiLms.Models.Lesson", jusiLmsModelsLessonTableBase);
            var jusiLmsModelsLessonMappingBase = new TableMappingBase<ColumnMappingBase>(lesson, jusiLmsModelsLessonTableBase, true);
            jusiLmsModelsLessonTableBase.AddTypeMapping(jusiLmsModelsLessonMappingBase, false);
            defaultTableMappings2.Add(jusiLmsModelsLessonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, lesson.FindProperty("Id")!, jusiLmsModelsLessonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryIdColumnBase0, lesson.FindProperty("CategoryId")!, jusiLmsModelsLessonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, lesson.FindProperty("CreatedAt")!, jusiLmsModelsLessonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, lesson.FindProperty("Description")!, jusiLmsModelsLessonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)headerColumnBase0, lesson.FindProperty("Header")!, jusiLmsModelsLessonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastModifiedColumnBase1, lesson.FindProperty("LastModified")!, jusiLmsModelsLessonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)youtubeUrlColumnBase, lesson.FindProperty("YoutubeUrl")!, jusiLmsModelsLessonMappingBase);

            var tableMappings2 = new List<TableMapping>();
            lesson.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var lessonsTable = new Table("Lessons", null, relationalModel);
            var idColumn1 = new Column("Id", "uuid", lessonsTable);
            lessonsTable.Columns.Add("Id", idColumn1);
            var categoryIdColumn0 = new Column("CategoryId", "uuid", lessonsTable);
            lessonsTable.Columns.Add("CategoryId", categoryIdColumn0);
            var createdAtColumn1 = new Column("CreatedAt", "timestamp with time zone", lessonsTable);
            lessonsTable.Columns.Add("CreatedAt", createdAtColumn1);
            var descriptionColumn0 = new Column("Description", "text", lessonsTable);
            lessonsTable.Columns.Add("Description", descriptionColumn0);
            var headerColumn0 = new Column("Header", "text", lessonsTable);
            lessonsTable.Columns.Add("Header", headerColumn0);
            var lastModifiedColumn1 = new Column("LastModified", "timestamp with time zone", lessonsTable)
            {
                IsNullable = true
            };
            lessonsTable.Columns.Add("LastModified", lastModifiedColumn1);
            var youtubeUrlColumn = new Column("YoutubeUrl", "text", lessonsTable);
            lessonsTable.Columns.Add("YoutubeUrl", youtubeUrlColumn);
            var pK_Lessons = new UniqueConstraint("PK_Lessons", lessonsTable, new[] { idColumn1 });
            lessonsTable.PrimaryKey = pK_Lessons;
            var pK_LessonsUc = RelationalModel.GetKey(this,
                "JusiLms.Models.Lesson",
                new[] { "Id" });
            pK_Lessons.MappedKeys.Add(pK_LessonsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_LessonsUc).Add(pK_Lessons);
            lessonsTable.UniqueConstraints.Add("PK_Lessons", pK_Lessons);
            var iX_Lessons_CategoryId = new TableIndex(
            "IX_Lessons_CategoryId", lessonsTable, new[] { categoryIdColumn0 }, false);
            var iX_Lessons_CategoryIdIx = RelationalModel.GetIndex(this,
                "JusiLms.Models.Lesson",
                new[] { "CategoryId" });
            iX_Lessons_CategoryId.MappedIndexes.Add(iX_Lessons_CategoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Lessons_CategoryIdIx).Add(iX_Lessons_CategoryId);
            lessonsTable.Indexes.Add("IX_Lessons_CategoryId", iX_Lessons_CategoryId);
            relationalModel.Tables.Add(("Lessons", null), lessonsTable);
            var lessonsTableMapping = new TableMapping(lesson, lessonsTable, true);
            lessonsTable.AddTypeMapping(lessonsTableMapping, false);
            tableMappings2.Add(lessonsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, lesson.FindProperty("Id")!, lessonsTableMapping);
            RelationalModel.CreateColumnMapping(categoryIdColumn0, lesson.FindProperty("CategoryId")!, lessonsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn1, lesson.FindProperty("CreatedAt")!, lessonsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, lesson.FindProperty("Description")!, lessonsTableMapping);
            RelationalModel.CreateColumnMapping(headerColumn0, lesson.FindProperty("Header")!, lessonsTableMapping);
            RelationalModel.CreateColumnMapping(lastModifiedColumn1, lesson.FindProperty("LastModified")!, lessonsTableMapping);
            RelationalModel.CreateColumnMapping(youtubeUrlColumn, lesson.FindProperty("YoutubeUrl")!, lessonsTableMapping);

            var role = FindEntityType("JusiLms.Models.Role")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            role.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var jusiLmsModelsRoleTableBase = new TableBase("JusiLms.Models.Role", null, relationalModel);
            var concurrencyStampColumnBase = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "text", jusiLmsModelsRoleTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsRoleTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "text", jusiLmsModelsRoleTableBase);
            jusiLmsModelsRoleTableBase.Columns.Add("Id", idColumnBase2);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "character varying(256)", jusiLmsModelsRoleTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsRoleTableBase.Columns.Add("Name", nameColumnBase0);
            var normalizedNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedName", "character varying(256)", jusiLmsModelsRoleTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsRoleTableBase.Columns.Add("NormalizedName", normalizedNameColumnBase);
            relationalModel.DefaultTables.Add("JusiLms.Models.Role", jusiLmsModelsRoleTableBase);
            var jusiLmsModelsRoleMappingBase = new TableMappingBase<ColumnMappingBase>(role, jusiLmsModelsRoleTableBase, true);
            jusiLmsModelsRoleTableBase.AddTypeMapping(jusiLmsModelsRoleMappingBase, false);
            defaultTableMappings3.Add(jusiLmsModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, role.FindProperty("Id")!, jusiLmsModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase, role.FindProperty("ConcurrencyStamp")!, jusiLmsModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, role.FindProperty("Name")!, jusiLmsModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedNameColumnBase, role.FindProperty("NormalizedName")!, jusiLmsModelsRoleMappingBase);

            var tableMappings3 = new List<TableMapping>();
            role.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn2 = new Column("Id", "text", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Id", idColumn2);
            var concurrencyStampColumn = new Column("ConcurrencyStamp", "text", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn);
            var nameColumn0 = new Column("Name", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("Name", nameColumn0);
            var normalizedNameColumn = new Column("NormalizedName", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("NormalizedName", normalizedNameColumn);
            var pK_AspNetRoles = new UniqueConstraint("PK_AspNetRoles", aspNetRolesTable, new[] { idColumn2 });
            aspNetRolesTable.PrimaryKey = pK_AspNetRoles;
            var pK_AspNetRolesUc = RelationalModel.GetKey(this,
                "JusiLms.Models.Role",
                new[] { "Id" });
            pK_AspNetRoles.MappedKeys.Add(pK_AspNetRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRolesUc).Add(pK_AspNetRoles);
            aspNetRolesTable.UniqueConstraints.Add("PK_AspNetRoles", pK_AspNetRoles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalizedNameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "JusiLms.Models.Role",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(role, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings3.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, role.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn, role.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, role.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalizedNameColumn, role.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var user = FindEntityType("JusiLms.Models.User")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var jusiLmsModelsUserTableBase = new TableBase("JusiLms.Models.User", null, relationalModel);
            var accessFailedCountColumnBase = new ColumnBase<ColumnMappingBase>("AccessFailedCount", "integer", jusiLmsModelsUserTableBase);
            jusiLmsModelsUserTableBase.Columns.Add("AccessFailedCount", accessFailedCountColumnBase);
            var avatarColumnBase = new ColumnBase<ColumnMappingBase>("Avatar", "text", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("Avatar", avatarColumnBase);
            var concurrencyStampColumnBase0 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "text", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase0);
            var createdAtColumnBase2 = new ColumnBase<ColumnMappingBase>("CreatedAt", "timestamp with time zone", jusiLmsModelsUserTableBase);
            jusiLmsModelsUserTableBase.Columns.Add("CreatedAt", createdAtColumnBase2);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "character varying(256)", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("Email", emailColumnBase);
            var emailConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("EmailConfirmed", "boolean", jusiLmsModelsUserTableBase);
            jusiLmsModelsUserTableBase.Columns.Add("EmailConfirmed", emailConfirmedColumnBase);
            var fullNameColumnBase = new ColumnBase<ColumnMappingBase>("FullName", "text", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("FullName", fullNameColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "text", jusiLmsModelsUserTableBase);
            jusiLmsModelsUserTableBase.Columns.Add("Id", idColumnBase3);
            var instaColumnBase = new ColumnBase<ColumnMappingBase>("Insta", "text", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("Insta", instaColumnBase);
            var lastActivityColumnBase = new ColumnBase<ColumnMappingBase>("LastActivity", "timestamp with time zone", jusiLmsModelsUserTableBase);
            jusiLmsModelsUserTableBase.Columns.Add("LastActivity", lastActivityColumnBase);
            var lastModifiedColumnBase2 = new ColumnBase<ColumnMappingBase>("LastModified", "timestamp with time zone", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("LastModified", lastModifiedColumnBase2);
            var lockoutEnabledColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnabled", "boolean", jusiLmsModelsUserTableBase);
            jusiLmsModelsUserTableBase.Columns.Add("LockoutEnabled", lockoutEnabledColumnBase);
            var lockoutEndColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnd", "timestamp with time zone", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("LockoutEnd", lockoutEndColumnBase);
            var normalizedEmailColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedEmail", "character varying(256)", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("NormalizedEmail", normalizedEmailColumnBase);
            var normalizedUserNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedUserName", "character varying(256)", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("NormalizedUserName", normalizedUserNameColumnBase);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("PasswordHash", "text", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("PasswordHash", passwordHashColumnBase);
            var phoneNumberColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumber", "text", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("PhoneNumber", phoneNumberColumnBase);
            var phoneNumberConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumberConfirmed", "boolean", jusiLmsModelsUserTableBase);
            jusiLmsModelsUserTableBase.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumnBase);
            var securityStampColumnBase = new ColumnBase<ColumnMappingBase>("SecurityStamp", "text", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("SecurityStamp", securityStampColumnBase);
            var tgColumnBase = new ColumnBase<ColumnMappingBase>("Tg", "text", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("Tg", tgColumnBase);
            var twoFactorEnabledColumnBase = new ColumnBase<ColumnMappingBase>("TwoFactorEnabled", "boolean", jusiLmsModelsUserTableBase);
            jusiLmsModelsUserTableBase.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "character varying(256)", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("UserName", userNameColumnBase);
            var waColumnBase = new ColumnBase<ColumnMappingBase>("Wa", "text", jusiLmsModelsUserTableBase)
            {
                IsNullable = true
            };
            jusiLmsModelsUserTableBase.Columns.Add("Wa", waColumnBase);
            relationalModel.DefaultTables.Add("JusiLms.Models.User", jusiLmsModelsUserTableBase);
            var jusiLmsModelsUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, jusiLmsModelsUserTableBase, true);
            jusiLmsModelsUserTableBase.AddTypeMapping(jusiLmsModelsUserMappingBase, false);
            defaultTableMappings4.Add(jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, user.FindProperty("Id")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessFailedCountColumnBase, user.FindProperty("AccessFailedCount")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)avatarColumnBase, user.FindProperty("Avatar")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase0, user.FindProperty("ConcurrencyStamp")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase2, user.FindProperty("CreatedAt")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, user.FindProperty("Email")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailConfirmedColumnBase, user.FindProperty("EmailConfirmed")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fullNameColumnBase, user.FindProperty("FullName")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)instaColumnBase, user.FindProperty("Insta")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastActivityColumnBase, user.FindProperty("LastActivity")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastModifiedColumnBase2, user.FindProperty("LastModified")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEnabledColumnBase, user.FindProperty("LockoutEnabled")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEndColumnBase, user.FindProperty("LockoutEnd")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedEmailColumnBase, user.FindProperty("NormalizedEmail")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedUserNameColumnBase, user.FindProperty("NormalizedUserName")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, user.FindProperty("PasswordHash")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberColumnBase, user.FindProperty("PhoneNumber")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberConfirmedColumnBase, user.FindProperty("PhoneNumberConfirmed")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)securityStampColumnBase, user.FindProperty("SecurityStamp")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tgColumnBase, user.FindProperty("Tg")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)twoFactorEnabledColumnBase, user.FindProperty("TwoFactorEnabled")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, user.FindProperty("UserName")!, jusiLmsModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)waColumnBase, user.FindProperty("Wa")!, jusiLmsModelsUserMappingBase);

            var tableMappings4 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn3 = new Column("Id", "text", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Id", idColumn3);
            var accessFailedCountColumn = new Column("AccessFailedCount", "integer", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("AccessFailedCount", accessFailedCountColumn);
            var avatarColumn = new Column("Avatar", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Avatar", avatarColumn);
            var concurrencyStampColumn0 = new Column("ConcurrencyStamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn0);
            var createdAtColumn2 = new Column("CreatedAt", "timestamp with time zone", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("CreatedAt", createdAtColumn2);
            var emailColumn = new Column("Email", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Email", emailColumn);
            var emailConfirmedColumn = new Column("EmailConfirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("EmailConfirmed", emailConfirmedColumn);
            var fullNameColumn = new Column("FullName", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("FullName", fullNameColumn);
            var instaColumn = new Column("Insta", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Insta", instaColumn);
            var lastActivityColumn = new Column("LastActivity", "timestamp with time zone", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LastActivity", lastActivityColumn);
            var lastModifiedColumn2 = new Column("LastModified", "timestamp with time zone", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LastModified", lastModifiedColumn2);
            var lockoutEnabledColumn = new Column("LockoutEnabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LockoutEnabled", lockoutEnabledColumn);
            var lockoutEndColumn = new Column("LockoutEnd", "timestamp with time zone", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LockoutEnd", lockoutEndColumn);
            var normalizedEmailColumn = new Column("NormalizedEmail", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedEmail", normalizedEmailColumn);
            var normalizedUserNameColumn = new Column("NormalizedUserName", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedUserName", normalizedUserNameColumn);
            var passwordHashColumn = new Column("PasswordHash", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PasswordHash", passwordHashColumn);
            var phoneNumberColumn = new Column("PhoneNumber", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PhoneNumber", phoneNumberColumn);
            var phoneNumberConfirmedColumn = new Column("PhoneNumberConfirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumn);
            var securityStampColumn = new Column("SecurityStamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("SecurityStamp", securityStampColumn);
            var tgColumn = new Column("Tg", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Tg", tgColumn);
            var twoFactorEnabledColumn = new Column("TwoFactorEnabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumn);
            var userNameColumn = new Column("UserName", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("UserName", userNameColumn);
            var waColumn = new Column("Wa", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Wa", waColumn);
            var pK_AspNetUsers = new UniqueConstraint("PK_AspNetUsers", aspNetUsersTable, new[] { idColumn3 });
            aspNetUsersTable.PrimaryKey = pK_AspNetUsers;
            var pK_AspNetUsersUc = RelationalModel.GetKey(this,
                "JusiLms.Models.User",
                new[] { "Id" });
            pK_AspNetUsers.MappedKeys.Add(pK_AspNetUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUsersUc).Add(pK_AspNetUsers);
            aspNetUsersTable.UniqueConstraints.Add("PK_AspNetUsers", pK_AspNetUsers);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalizedEmailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "JusiLms.Models.User",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalizedUserNameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "JusiLms.Models.User",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(user, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings4.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, user.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(accessFailedCountColumn, user.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(avatarColumn, user.FindProperty("Avatar")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn0, user.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn2, user.FindProperty("CreatedAt")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, user.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailConfirmedColumn, user.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(fullNameColumn, user.FindProperty("FullName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(instaColumn, user.FindProperty("Insta")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastActivityColumn, user.FindProperty("LastActivity")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastModifiedColumn2, user.FindProperty("LastModified")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEnabledColumn, user.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEndColumn, user.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedEmailColumn, user.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedUserNameColumn, user.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, user.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberColumn, user.FindProperty("PhoneNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberConfirmedColumn, user.FindProperty("PhoneNumberConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(securityStampColumn, user.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(tgColumn, user.FindProperty("Tg")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(twoFactorEnabledColumn, user.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, user.FindProperty("UserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(waColumn, user.FindProperty("Wa")!, aspNetUsersTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null, relationalModel);
            var claimTypeColumnBase = new ColumnBase<ColumnMappingBase>("ClaimType", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase);
            var claimValueColumnBase = new ColumnBase<ColumnMappingBase>("ClaimValue", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "integer", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("Id", idColumnBase4);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("RoleId", roleIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase, false);
            defaultTableMappings5.Add(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);

            var tableMappings5 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn4 = new Column("Id", "integer", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("Id", idColumn4);
            idColumn4.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claimTypeColumn = new Column("ClaimType", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimType", claimTypeColumn);
            var claimValueColumn = new Column("ClaimValue", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimValue", claimValueColumn);
            var roleIdColumn = new Column("RoleId", "text", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("RoleId", roleIdColumn);
            var pK_AspNetRoleClaims = new UniqueConstraint("PK_AspNetRoleClaims", aspNetRoleClaimsTable, new[] { idColumn4 });
            aspNetRoleClaimsTable.PrimaryKey = pK_AspNetRoleClaims;
            var pK_AspNetRoleClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "Id" });
            pK_AspNetRoleClaims.MappedKeys.Add(pK_AspNetRoleClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRoleClaimsUc).Add(pK_AspNetRoleClaims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("PK_AspNetRoleClaims", pK_AspNetRoleClaims);
            var iX_AspNetRoleClaims_RoleId = new TableIndex(
            "IX_AspNetRoleClaims_RoleId", aspNetRoleClaimsTable, new[] { roleIdColumn }, false);
            var iX_AspNetRoleClaims_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" });
            iX_AspNetRoleClaims_RoleId.MappedIndexes.Add(iX_AspNetRoleClaims_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetRoleClaims_RoleIdIx).Add(iX_AspNetRoleClaims_RoleId);
            aspNetRoleClaimsTable.Indexes.Add("IX_AspNetRoleClaims_RoleId", iX_AspNetRoleClaims_RoleId);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings5.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", null, relationalModel);
            var claimTypeColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimType", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase0);
            var claimValueColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimValue", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase0);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "integer", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("Id", idColumnBase5);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase, false);
            defaultTableMappings6.Add(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);

            var tableMappings6 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn5 = new Column("Id", "integer", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("Id", idColumn5);
            idColumn5.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claimTypeColumn0 = new Column("ClaimType", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimType", claimTypeColumn0);
            var claimValueColumn0 = new Column("ClaimValue", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimValue", claimValueColumn0);
            var userIdColumn = new Column("UserId", "text", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("UserId", userIdColumn);
            var pK_AspNetUserClaims = new UniqueConstraint("PK_AspNetUserClaims", aspNetUserClaimsTable, new[] { idColumn5 });
            aspNetUserClaimsTable.PrimaryKey = pK_AspNetUserClaims;
            var pK_AspNetUserClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "Id" });
            pK_AspNetUserClaims.MappedKeys.Add(pK_AspNetUserClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserClaimsUc).Add(pK_AspNetUserClaims);
            aspNetUserClaimsTable.UniqueConstraints.Add("PK_AspNetUserClaims", pK_AspNetUserClaims);
            var iX_AspNetUserClaims_UserId = new TableIndex(
            "IX_AspNetUserClaims_UserId", aspNetUserClaimsTable, new[] { userIdColumn }, false);
            var iX_AspNetUserClaims_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" });
            iX_AspNetUserClaims_UserId.MappedIndexes.Add(iX_AspNetUserClaims_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserClaims_UserIdIx).Add(iX_AspNetUserClaims_UserId);
            aspNetUserClaimsTable.Indexes.Add("IX_AspNetUserClaims_UserId", iX_AspNetUserClaims_UserId);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings6.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", null, relationalModel);
            var loginProviderColumnBase = new ColumnBase<ColumnMappingBase>("LoginProvider", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase);
            var providerDisplayNameColumnBase = new ColumnBase<ColumnMappingBase>("ProviderDisplayName", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderDisplayName", providerDisplayNameColumnBase);
            var providerKeyColumnBase = new ColumnBase<ColumnMappingBase>("ProviderKey", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderKey", providerKeyColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase, false);
            defaultTableMappings7.Add(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerKeyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerDisplayNameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);

            var tableMappings7 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var loginProviderColumn = new Column("LoginProvider", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("LoginProvider", loginProviderColumn);
            var providerKeyColumn = new Column("ProviderKey", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("ProviderKey", providerKeyColumn);
            var providerDisplayNameColumn = new Column("ProviderDisplayName", "text", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("ProviderDisplayName", providerDisplayNameColumn);
            var userIdColumn0 = new Column("UserId", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("UserId", userIdColumn0);
            var pK_AspNetUserLogins = new UniqueConstraint("PK_AspNetUserLogins", aspNetUserLoginsTable, new[] { loginProviderColumn, providerKeyColumn });
            aspNetUserLoginsTable.PrimaryKey = pK_AspNetUserLogins;
            var pK_AspNetUserLoginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "LoginProvider", "ProviderKey" });
            pK_AspNetUserLogins.MappedKeys.Add(pK_AspNetUserLoginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserLoginsUc).Add(pK_AspNetUserLogins);
            aspNetUserLoginsTable.UniqueConstraints.Add("PK_AspNetUserLogins", pK_AspNetUserLogins);
            var iX_AspNetUserLogins_UserId = new TableIndex(
            "IX_AspNetUserLogins_UserId", aspNetUserLoginsTable, new[] { userIdColumn0 }, false);
            var iX_AspNetUserLogins_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" });
            iX_AspNetUserLogins_UserId.MappedIndexes.Add(iX_AspNetUserLogins_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserLogins_UserIdIx).Add(iX_AspNetUserLogins_UserId);
            aspNetUserLoginsTable.Indexes.Add("IX_AspNetUserLogins_UserId", iX_AspNetUserLogins_UserId);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings7.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerKeyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerDisplayNameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var microsoftAspNetCoreIdentityIdentityUserRolestringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null, relationalModel);
            var roleIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RoleId", "text", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("RoleId", roleIdColumnBase0);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "text", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRolestringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase, false);
            defaultTableMappings8.Add(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);

            var tableMappings8 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var userIdColumn1 = new Column("UserId", "text", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("UserId", userIdColumn1);
            var roleIdColumn0 = new Column("RoleId", "text", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("RoleId", roleIdColumn0);
            var pK_AspNetUserRoles = new UniqueConstraint("PK_AspNetUserRoles", aspNetUserRolesTable, new[] { userIdColumn1, roleIdColumn0 });
            aspNetUserRolesTable.PrimaryKey = pK_AspNetUserRoles;
            var pK_AspNetUserRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId", "RoleId" });
            pK_AspNetUserRoles.MappedKeys.Add(pK_AspNetUserRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserRolesUc).Add(pK_AspNetUserRoles);
            aspNetUserRolesTable.UniqueConstraints.Add("PK_AspNetUserRoles", pK_AspNetUserRoles);
            var iX_AspNetUserRoles_RoleId = new TableIndex(
            "IX_AspNetUserRoles_RoleId", aspNetUserRolesTable, new[] { roleIdColumn0 }, false);
            var iX_AspNetUserRoles_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" });
            iX_AspNetUserRoles_RoleId.MappedIndexes.Add(iX_AspNetUserRoles_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserRoles_RoleIdIx).Add(iX_AspNetUserRoles_RoleId);
            aspNetUserRolesTable.Indexes.Add("IX_AspNetUserRoles_RoleId", iX_AspNetUserRoles_RoleId);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings8.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", null, relationalModel);
            var loginProviderColumnBase0 = new ColumnBase<ColumnMappingBase>("LoginProvider", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase0);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Name", nameColumnBase1);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("UserId", userIdColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase, false);
            defaultTableMappings9.Add(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);

            var tableMappings9 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var userIdColumn2 = new Column("UserId", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("UserId", userIdColumn2);
            var loginProviderColumn0 = new Column("LoginProvider", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("LoginProvider", loginProviderColumn0);
            var nameColumn1 = new Column("Name", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("Name", nameColumn1);
            var valueColumn = new Column("Value", "text", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("Value", valueColumn);
            var pK_AspNetUserTokens = new UniqueConstraint("PK_AspNetUserTokens", aspNetUserTokensTable, new[] { userIdColumn2, loginProviderColumn0, nameColumn1 });
            aspNetUserTokensTable.PrimaryKey = pK_AspNetUserTokens;
            var pK_AspNetUserTokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId", "LoginProvider", "Name" });
            pK_AspNetUserTokens.MappedKeys.Add(pK_AspNetUserTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserTokensUc).Add(pK_AspNetUserTokens);
            aspNetUserTokensTable.UniqueConstraints.Add("PK_AspNetUserTokens", pK_AspNetUserTokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings9.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);

            var roleUser = FindEntityType("RoleUser")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            roleUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var roleUserTableBase = new TableBase("RoleUser", null, relationalModel);
            var rolesIdColumnBase = new ColumnBase<ColumnMappingBase>("RolesId", "text", roleUserTableBase);
            roleUserTableBase.Columns.Add("RolesId", rolesIdColumnBase);
            var usersIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UsersId", "text", roleUserTableBase);
            roleUserTableBase.Columns.Add("UsersId", usersIdColumnBase0);
            relationalModel.DefaultTables.Add("RoleUser", roleUserTableBase);
            var roleUserMappingBase = new TableMappingBase<ColumnMappingBase>(roleUser, roleUserTableBase, true);
            roleUserTableBase.AddTypeMapping(roleUserMappingBase, false);
            defaultTableMappings10.Add(roleUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)rolesIdColumnBase, roleUser.FindProperty("RolesId")!, roleUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usersIdColumnBase0, roleUser.FindProperty("UsersId")!, roleUserMappingBase);

            var tableMappings10 = new List<TableMapping>();
            roleUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var roleUserTable = new Table("RoleUser", null, relationalModel);
            var rolesIdColumn = new Column("RolesId", "text", roleUserTable);
            roleUserTable.Columns.Add("RolesId", rolesIdColumn);
            var usersIdColumn0 = new Column("UsersId", "text", roleUserTable);
            roleUserTable.Columns.Add("UsersId", usersIdColumn0);
            var pK_RoleUser = new UniqueConstraint("PK_RoleUser", roleUserTable, new[] { rolesIdColumn, usersIdColumn0 });
            roleUserTable.PrimaryKey = pK_RoleUser;
            var pK_RoleUserUc = RelationalModel.GetKey(this,
                "RoleUser",
                new[] { "RolesId", "UsersId" });
            pK_RoleUser.MappedKeys.Add(pK_RoleUserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RoleUserUc).Add(pK_RoleUser);
            roleUserTable.UniqueConstraints.Add("PK_RoleUser", pK_RoleUser);
            var iX_RoleUser_UsersId = new TableIndex(
            "IX_RoleUser_UsersId", roleUserTable, new[] { usersIdColumn0 }, false);
            var iX_RoleUser_UsersIdIx = RelationalModel.GetIndex(this,
                "RoleUser",
                new[] { "UsersId" });
            iX_RoleUser_UsersId.MappedIndexes.Add(iX_RoleUser_UsersIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RoleUser_UsersIdIx).Add(iX_RoleUser_UsersId);
            roleUserTable.Indexes.Add("IX_RoleUser_UsersId", iX_RoleUser_UsersId);
            relationalModel.Tables.Add(("RoleUser", null), roleUserTable);
            var roleUserTableMapping = new TableMapping(roleUser, roleUserTable, true);
            roleUserTable.AddTypeMapping(roleUserTableMapping, false);
            tableMappings10.Add(roleUserTableMapping);
            RelationalModel.CreateColumnMapping(rolesIdColumn, roleUser.FindProperty("RolesId")!, roleUserTableMapping);
            RelationalModel.CreateColumnMapping(usersIdColumn0, roleUser.FindProperty("UsersId")!, roleUserTableMapping);
            var fK_AspNetRoleClaims_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetRoleClaims_AspNetRoles_RoleId", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { roleIdColumn },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetRoleClaims_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" },
                "JusiLms.Models.Role",
                new[] { "Id" });
            fK_AspNetRoleClaims_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk).Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            var fK_AspNetUserClaims_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserClaims_AspNetUsers_UserId", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { userIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserClaims_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" },
                "JusiLms.Models.User",
                new[] { "Id" });
            fK_AspNetUserClaims_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserClaims_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserClaims_AspNetUsers_UserIdFk).Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            var fK_AspNetUserLogins_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserLogins_AspNetUsers_UserId", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { userIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserLogins_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" },
                "JusiLms.Models.User",
                new[] { "Id" });
            fK_AspNetUserLogins_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserLogins_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserLogins_AspNetUsers_UserIdFk).Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            var fK_AspNetUserRoles_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetRoles_RoleId", aspNetUserRolesTable, aspNetRolesTable,
                new[] { roleIdColumn0 },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" },
                "JusiLms.Models.Role",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetRoles_RoleIdFk).Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            var fK_AspNetUserRoles_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetUsers_UserId", aspNetUserRolesTable, aspNetUsersTable,
                new[] { userIdColumn1 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId" },
                "JusiLms.Models.User",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetUsers_UserIdFk).Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            var fK_AspNetUserTokens_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserTokens_AspNetUsers_UserId", aspNetUserTokensTable, aspNetUsersTable,
                new[] { userIdColumn2 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserTokens_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId" },
                "JusiLms.Models.User",
                new[] { "Id" });
            fK_AspNetUserTokens_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserTokens_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserTokens_AspNetUsers_UserIdFk).Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            var fK_HomeWorks_Categories_CategoryId = new ForeignKeyConstraint(
                "FK_HomeWorks_Categories_CategoryId", homeWorksTable, categoriesTable,
                new[] { categoryIdColumn },
                categoriesTable.FindUniqueConstraint("PK_Categories")!, ReferentialAction.Cascade);
            var fK_HomeWorks_Categories_CategoryIdFk = RelationalModel.GetForeignKey(this,
                "JusiLms.Models.HomeWork",
                new[] { "CategoryId" },
                "JusiLms.Models.Category",
                new[] { "Id" });
            fK_HomeWorks_Categories_CategoryId.MappedForeignKeys.Add(fK_HomeWorks_Categories_CategoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_HomeWorks_Categories_CategoryIdFk).Add(fK_HomeWorks_Categories_CategoryId);
            homeWorksTable.ForeignKeyConstraints.Add(fK_HomeWorks_Categories_CategoryId);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fK_HomeWorks_Categories_CategoryId);
            var fK_HomeWorkUser_AspNetUsers_UsersId = new ForeignKeyConstraint(
                "FK_HomeWorkUser_AspNetUsers_UsersId", homeWorkUserTable, aspNetUsersTable,
                new[] { usersIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_HomeWorkUser_AspNetUsers_UsersIdFk = RelationalModel.GetForeignKey(this,
                "HomeWorkUser",
                new[] { "UsersId" },
                "JusiLms.Models.User",
                new[] { "Id" });
            fK_HomeWorkUser_AspNetUsers_UsersId.MappedForeignKeys.Add(fK_HomeWorkUser_AspNetUsers_UsersIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_HomeWorkUser_AspNetUsers_UsersIdFk).Add(fK_HomeWorkUser_AspNetUsers_UsersId);
            homeWorkUserTable.ForeignKeyConstraints.Add(fK_HomeWorkUser_AspNetUsers_UsersId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_HomeWorkUser_AspNetUsers_UsersId);
            var fK_HomeWorkUser_HomeWorks_HomeWorksId = new ForeignKeyConstraint(
                "FK_HomeWorkUser_HomeWorks_HomeWorksId", homeWorkUserTable, homeWorksTable,
                new[] { homeWorksIdColumn },
                homeWorksTable.FindUniqueConstraint("PK_HomeWorks")!, ReferentialAction.Cascade);
            var fK_HomeWorkUser_HomeWorks_HomeWorksIdFk = RelationalModel.GetForeignKey(this,
                "HomeWorkUser",
                new[] { "HomeWorksId" },
                "JusiLms.Models.HomeWork",
                new[] { "Id" });
            fK_HomeWorkUser_HomeWorks_HomeWorksId.MappedForeignKeys.Add(fK_HomeWorkUser_HomeWorks_HomeWorksIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_HomeWorkUser_HomeWorks_HomeWorksIdFk).Add(fK_HomeWorkUser_HomeWorks_HomeWorksId);
            homeWorkUserTable.ForeignKeyConstraints.Add(fK_HomeWorkUser_HomeWorks_HomeWorksId);
            homeWorksTable.ReferencingForeignKeyConstraints.Add(fK_HomeWorkUser_HomeWorks_HomeWorksId);
            var fK_Lessons_Categories_CategoryId = new ForeignKeyConstraint(
                "FK_Lessons_Categories_CategoryId", lessonsTable, categoriesTable,
                new[] { categoryIdColumn0 },
                categoriesTable.FindUniqueConstraint("PK_Categories")!, ReferentialAction.Cascade);
            var fK_Lessons_Categories_CategoryIdFk = RelationalModel.GetForeignKey(this,
                "JusiLms.Models.Lesson",
                new[] { "CategoryId" },
                "JusiLms.Models.Category",
                new[] { "Id" });
            fK_Lessons_Categories_CategoryId.MappedForeignKeys.Add(fK_Lessons_Categories_CategoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Lessons_Categories_CategoryIdFk).Add(fK_Lessons_Categories_CategoryId);
            lessonsTable.ForeignKeyConstraints.Add(fK_Lessons_Categories_CategoryId);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fK_Lessons_Categories_CategoryId);
            var fK_RoleUser_AspNetRoles_RolesId = new ForeignKeyConstraint(
                "FK_RoleUser_AspNetRoles_RolesId", roleUserTable, aspNetRolesTable,
                new[] { rolesIdColumn },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_RoleUser_AspNetRoles_RolesIdFk = RelationalModel.GetForeignKey(this,
                "RoleUser",
                new[] { "RolesId" },
                "JusiLms.Models.Role",
                new[] { "Id" });
            fK_RoleUser_AspNetRoles_RolesId.MappedForeignKeys.Add(fK_RoleUser_AspNetRoles_RolesIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_RoleUser_AspNetRoles_RolesIdFk).Add(fK_RoleUser_AspNetRoles_RolesId);
            roleUserTable.ForeignKeyConstraints.Add(fK_RoleUser_AspNetRoles_RolesId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_RoleUser_AspNetRoles_RolesId);
            var fK_RoleUser_AspNetUsers_UsersId = new ForeignKeyConstraint(
                "FK_RoleUser_AspNetUsers_UsersId", roleUserTable, aspNetUsersTable,
                new[] { usersIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_RoleUser_AspNetUsers_UsersIdFk = RelationalModel.GetForeignKey(this,
                "RoleUser",
                new[] { "UsersId" },
                "JusiLms.Models.User",
                new[] { "Id" });
            fK_RoleUser_AspNetUsers_UsersId.MappedForeignKeys.Add(fK_RoleUser_AspNetUsers_UsersIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_RoleUser_AspNetUsers_UsersIdFk).Add(fK_RoleUser_AspNetUsers_UsersId);
            roleUserTable.ForeignKeyConstraints.Add(fK_RoleUser_AspNetUsers_UsersId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_RoleUser_AspNetUsers_UsersId);
            return relationalModel.MakeReadOnly();
        }
    }
}
