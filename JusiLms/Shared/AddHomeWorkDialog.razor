@inject ICategoryApi CategoriesApi

<EditForm @ref=_form Model=HomeWork>
    <DataAnnotationsValidator />
    <MudDialog Class="bg-white" Options=@_optiosn>
        <DialogContent>
            <MudTextField Label="Задание" @bind-Value=HomeWork.Header For="(() => HomeWork.Header)" />
            <MudTextField Label="Описание" @bind-Value=HomeWork.Details For="(() => HomeWork.Details)" />
            <MudSelect Label="Выберите модуль"
                       Class="shifu-button col-11 avante mt-2"
                       ListClass="bg-white h6"
                       PopoverClass="avante"
            @bind-Value=HomeWork.CategoryId
            @bind-Text=_text>
                @foreach (var category in _categories)
                {
                    <MudSelectItem Value=category.Id Class="avante">@category.Name</MudSelectItem>
                }
            </MudSelect>
            <div class="d-flex flex-column">
                <div>Сложность</div>
                <MudRating MaxValue="3" @bind-SelectedValue=HomeWork.Difficulty />
            </div>

            @foreach (var error in _form.EditContext.GetValidationMessages(() => HomeWork.Difficulty))
            {
                <MudText Color="Color.Error">@error</MudText>
            }


        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Отмена</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">
                @(HomeWork.Id == Guid.Empty ? "Добавить" : "Обновить")
                
            </MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>
@code {
    private EditForm _form;

    private string? _text;
    private IEnumerable<Category> _categories = Array.Empty<Category>();

    private readonly DialogOptions _optiosn = new()
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = false,
        };

    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoriesApi.GetCategories();

        if (HomeWork.Id != Guid.Empty)
        {
            _text = _categories.Where(x => x.Id == HomeWork.CategoryId).FirstOrDefault()?.Name;
            return;
        }

        var first = _categories.FirstOrDefault();

        if (first == null) return;

        _text = first.Name;
        HomeWork.CategoryId = first.Id;
        HomeWork.Difficulty = 1;
    }

    [Parameter]
    public HomeWork HomeWork { get; set; } = new();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private async Task Submit()
    {
        if (!_form.EditContext.Validate())
        {
            this.StateHasChanged();
            return;
        }

        MudDialog.Close(DialogResult.Ok(HomeWork));
    }
    void Cancel() => MudDialog.Cancel();
}
