@page "/user/{Id:guid}/edit"
@using Microsoft.AspNetCore.Identity;

@attribute [Authorize(Roles = "Admin")]

@inject IUsersApi UserService
@inject ICategoryApi CategoryService
@inject ILessonsApi LessonsService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IHomeWorksApi HomeWorksService
@inject NavigationManager NavigationManager

@if (_user == null) return;

<div class="row w-100 p-0 justify-content-center justify-content-sm-between">

    <div class="col-12 col-lg-3 border-end-2 row d-lg-block p-0">

        @if (_loading)
        {
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        }
        else
        {
            <div class="col-5 col-lg-12 justify-content-center justify-content-lg-start d-flex p-0 avatar-container">
                <img src=@_user.Avatar class="mb-3 avatar radius-10 " />
            </div>

            <div class="col-7 col-lg-12 pr-2 row small-text justify-content-center align-items-stretch">
                <MudText Typo="Typo.h4" Class="avante dark-text p-0">@_user.FullName</MudText>
                <MudText Typo="Typo.h5" Class="avante dark-text large-bottom p-0">@_user.Insta</MudText>

                <div class="col-12 row w-100 p-0">
                    <div class="col-6 col-lg-12 p-0">
                        <MudText Typo="Typo.h6" Class="avante grey-text">Почта:</MudText>
                        <MudText Typo="Typo.h6" Class="avante grey-text mb-md-3 mb-lg-5">@_user.Email</MudText>

                        <MudText Typo="Typo.h6" Class="avante grey-text">Ник в тг:</MudText>
                        <MudText Typo="Typo.h6" Class="avante grey-text mb-3 mb-md-3 mb-lg-5">@_user.Tg</MudText>
                    </div>

                    <div class="col-6 col-lg-12 p-0">
                        <MudText Typo="Typo.h6" Class="avante grey-text">Номер телефона:</MudText>
                        <MudText Typo="Typo.h6" Class="avante grey-text mb-md-3 mb-lg-5">@_user.PhoneNumber</MudText>

                        <MudText Typo="Typo.h6" Class="avante grey-text">номер W/A::</MudText>
                        <MudText Typo="Typo.h6" Class="avante grey-text mb-3 mb-md-3 mb-lg-5">@_user.Wa</MudText>
                    </div>
                </div>
            </div>



        }


    </div>

    <div class="col-6 col-lg-6 my-3 pr-2 p-0 border-end-1">

        <div class="header-container avante dark-card px-2 px-md-5 py-1 mb-2 mb-sm-4 text-white">Выполнение дзшки</div>

        @if (_loading)
        {
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        }
        else
        {
            var iter = 0;
            var grouped = _allHomeworks.GroupBy(x => x.CategoryId);

            foreach (var homeWorksModule in grouped)
            {
                iter++;
                @foreach (var hw in homeWorksModule)
                {
                    <div class="row col-12 justify-content-center align-items-center py-2 py-sm-4 hw" >
                        <div class="col-2 h-100 d-flex align-items-center justify-content-center p-1">
                            <div class="bg-white pa-1 p-sm-1 py-sm-3 avante radius h-100 w-100 small-text" style="border-radius: 4px">
                                <h5 class="text-center m-0">
                                    @(iter)
                                </h5>
                            </div>
                        </div>

                        <div class="col-10 p-0 h-100">
                            <MudBadge Class="w-100 h-100" BadgeClass="norm-x" Overlap=true Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(_ => RemoveHomework(hw))">
                                <div class="pa-1 px-sm-2 h-100 w-100 py-sm-1 avante dark-card grey-card small-text cursor-pointer">
                                    <h5 class="avante small-text" style="overflow: hidden">@hw.Details</h5>
                                </div>
                            </MudBadge>
                        </div>

                    </div>
                }
            }

            <MudSelect T="HomeWork" Label="Добавить выполненую дзшку"
                       Class="shifu-button col-11 avante mt-2 d-none d-sm-block"
                       Dense=true
                       ListClass="bg-white h6"
                       PopoverClass="avante"
            @ref=_select
                       ValueChanged=AddHomework>
                @foreach (var hw in _addableHomeWorks)
                {
                    <MudSelectItem Value=hw Class="avante">@hw.Details</MudSelectItem>
                }
            </MudSelect>
        }

    </div>

    <div class="col-4 col-sm-5 col-lg-2 my-3">
        <div class="header-container avante dark-card px-2 px-md-5 py-1 mb-2 mb-sm-4 text-white" style="width:auto">Статус</div>

        @if (_loading)
        {
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        }
        else
        {
            var iter = 0;
            var grouped = _allHomeworks.GroupBy(x => x.CategoryId);

            foreach (var homeWorksModule in grouped)
            {
                iter++;
                @foreach (var hw in homeWorksModule)
                {
                    <div class="row col-12 justify-content-center align-items-center hw">
                        <div class="col-12 h-100 d-flex align-items-center justify-content-center">
                            <div class="avante radius h-100 w-100 small-text">
                                <h5 class="text-center m-0 over-text" style="text-wrap: unset;">
                                    @{ var s = "";}
                                    @for(var i = 0; i < hw.Difficulty; i++)
                                    {
                                        s += "*";
                                    }
                                    @if(_homeWorks.Any(x => x.Id == hw.Id))
                                    {
                                        <span class="access">выполнено @s</span>
                                    }
                                    else
                                    {
                                        <span class="dont-start">не начато @s</span>
                                    }

                                </h5>
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>

    <div class="col-12 d-block d-sm-none">
        <MudSelect T="HomeWork" Label="Добавить выполненую дзшку"
                   Class="shifu-button col-11 avante mt-2"
                   ListClass="bg-white h6"
                   Dense=true
                   PopoverClass="avante"
        @ref=_select
                   ValueChanged=AddHomework>
            @foreach (var hw in _addableHomeWorks)
            {
                <MudSelectItem Value=hw Class="avante">@hw.Details</MudSelectItem>
            }
        </MudSelect>
    </div>

</div>

@code {

    [Parameter]
    public Guid Id { get; set; }

    private User? _user;
    private List<HomeWork> _homeWorks = new();
    private List<HomeWork> _addableHomeWorks = new();
    private IEnumerable<HomeWork> _allHomeworks = Array.Empty<HomeWork>();

    private MudSelect<HomeWork> _select;

    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _user = await UserService.GetUserById(Id);

        if (_user == null) return;

        _addableHomeWorks = new(await HomeWorksService.GetAllHomeWorks());
        _allHomeworks = _addableHomeWorks.ToList();

        IEnumerable<HomeWork> exist = await HomeWorksService.GetUserHomeworks(Guid.Parse(_user.Id)) ?? Array.Empty<HomeWork>();

        _homeWorks = new(exist);

        foreach (var hw in _homeWorks)
        {
            _addableHomeWorks.Remove(hw);
        }

        this.StateHasChanged();

        _loading = false;
    }

    private async Task Update()
    {
        _loading = true;
        _addableHomeWorks = new(await HomeWorksService.GetAllHomeWorks());

        IEnumerable<HomeWork> exist = await HomeWorksService.GetUserHomeworks(Id) ?? Array.Empty<HomeWork>();

        _homeWorks = new(exist);

        foreach (var hw in _homeWorks)
        {
            _addableHomeWorks.Remove(hw);
        }
        this.StateHasChanged();

        _loading = false;
    }

    private async Task RemoveHomework(HomeWork hw)
    {
        if (!(bool)(await DialogService.ShowMessageBox("Убрать из выполненных?", "Вы уверены?", "Да", "Нет")))
        {
            return;
        }
        this.StateHasChanged();
        await HomeWorksService.RemoveHomeworkToUser(Id, hw.Id);
        this.StateHasChanged();
        await Update();
        this.StateHasChanged();
    }

    private async Task AddHomework(HomeWork hw)
    {
        if (hw == null)
        {
            return;
        }
        _select.Value = null;
        await HomeWorksService.AddHomeworkToUser(Id, hw.Id);
        this.StateHasChanged();
        await Update();
        this.StateHasChanged();
    }
}