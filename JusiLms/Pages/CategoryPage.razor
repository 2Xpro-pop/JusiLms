@page "/category/{Id:guid}"

@inject ICategoryService CategoryService
@inject ILessonsApi LessonsService
@inject NavigationManager NavigationManager
@inject ILogger<CategoryPage> Logger
@inject ISnackbar Snackbar

@if (_category == null && !_notFound)
{
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    return;
}

@if (_notFound)
{
    <MudText Typo="Typo.h2">Категория не найдена :^(</MudText>
    return;
}

<MudText Typo="Typo.h3" Class="mt-4">@_category!.Name</MudText>
<MudDivider Light=true Class="mb-4" />

<div class="row justify-content-evenly align-self-stretch">
    @foreach (var lesson in _lessons)
    {
        <div class="col-12 col-sm-6 col-md-4 col-lg-3 p-3 ">
            <div class="dark-card w-100 dark-card-container text-white avante mud-ripple" @onclick=@(_ => NavigationManager.NavigateTo($"lesson/{lesson.Id}"))>
                <div class="pad">
                    <h6 class="mud-typography mud-typography-h6 mud-typography-gutterbottom">@lesson.Header</h6>
                    <p class="mud-typography mud-typography-body1 description">@lesson.Description</p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private bool _notFound;
    private Category? _category;

    private IEnumerable<Lesson> _lessons = Array.Empty<Lesson>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _category = await CategoryService.GetCategory(Id);
        }
        catch (Refit.ValidationApiException exc)
        {
            if(exc.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                _notFound = true;
                _category = null;
            }

            await Logger.LogException(exc, "Categories cannot get");
            Snackbar.Add("");
        }
        catch
        {

        }
        finally
        {
            _notFound = _category == null;
        }

        if (_category == null)
        {
            return;
        }

        try
        {
            _lessons = await LessonsService.GetLessonsByCategory(_category.Id);
        }
        catch
        {
            _lessons = Array.Empty<Lesson>();
        }
    }
}
