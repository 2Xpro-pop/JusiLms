@page "/admin"
@using Microsoft.AspNetCore.Identity;

@attribute [Authorize(Roles = "Admin")]

@inject IUsersApi UserService
@inject ICategoryApi CategoryService
@inject ILessonsApi LessonsService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IHomeWorksApi HomeWorksService
@inject NavigationManager NavigationManager
@inject ILogger<Admin> Logger

<div class="row align-items-stretch">
    <div class="col-12 col-lg-4 px-4 my-5 border-end-2 sector">
        <div class="header-container avante dark-card px-5 py-1 mb-4 text-white">ученики</div>

        @if (_usersLoading)
        {
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        }
        else
        {
            @foreach (var user in _users)
            {
                <div class="row w-100 justify-content-center align-items-stretch py-4">
                    <div class="col-3">
                        <MudImage Src=@user.Avatar Alt="Admin" ObjectFit=ObjectFit.Cover ObjectPosition=ObjectPosition.Center Elevation="25" Class="rounded-lg w-100 h-100" />
                    </div>
                    <MudBadge Class="col-9" BadgeClass="cursor-pointer" Overlap=true Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(_ => RemoveUser(user))">
                        <div class="px-2 py-1 avante dark-card cursor-pointer" @onclick=@( _ => NavigationManager.NavigateTo($"/user/{user.Id}/edit"))>
                            <MudText Typo="Typo.h5" Class="avante text-white">@user.FullName</MudText>
                            <MudText Typo="Typo.h6" Class="avante text-white">@GetLastActivity(user)</MudText>
                        </div>
                    </MudBadge>

                </div>


            }

            <MudButton Class="shifu-button col-11 avante" OnClick="OpenUserAddDialog">Добавить ученика</MudButton>

        }


    </div>
    <div class="col-12 col-lg-4 px-4 my-5 border-end-2 sector">

        <div class="header-container avante dark-card px-5 py-1 mb-4 text-white">модули</div>

        @if (_categoriesLoading)
        {
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        }
        else
        {
            var iter = 0;
            @foreach (var category in _categories)
            {
                <div class="mb-2 w-100">
                    <MudBadge Class="w-100" Overlap=true Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(_ => RemoveCategory(category))">
                        <div class="row w-100 justify-content-between ml-1 px-2 py-1 avante dark-card surface-color cursor-pointer"
                        @onclick=@((_) => NavigationManager.NavigateTo($"category/{category.Id}/edit"))>
                            <div class="col-1">
                                <MudText Typo="Typo.h5" Class="avante text-white">@(++iter)</MudText>
                                </div>
                                <div class="col-10 col-md-11">
                                    <MudText Typo="Typo.h5" Class="avante text-white">@category.Name</MudText>
                                    <MudText Typo="Typo.body1" Class="avante text-white">@category.Description</MudText>
                                </div>

                            </div>
                        </MudBadge>

                    </div>


            }

            <MudButton Class="shifu-button col-11 avante mt-2" OnClick="OpenCategoryAddDialog">Добавить модуль</MudButton>

        }

    </div>
    <div class="col-12 col-lg-4 px-4 my-5 sector">

        <div class="header-container avante dark-card px-5 py-1 mb-4 text-white">дзшки</div>

        @if (_homeworksLoading)
        {
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        }
        else
        {
            var iter = 0;
            var grouped = _homeworks.GroupBy(x => x.CategoryId);

            foreach (var homeWorksModule in grouped)
            {
                iter++;
                @foreach (var hw in homeWorksModule)
                {
                    <div class="row w-100 justify-content-center align-items-stretch py-4">
                        <div class="col-2 h-100 d-flex align-items-stretch justify-content-center p-1">
                            <div class="bg-white p-1 py-3 avante radius h-100 w-100">
                                <div class="text-center h4 m-0">
                                    @(iter)
                                </div>
                            </div>
                        </div>

                        <MudBadge Class="col-10 d-flex" BadgeClass="cursor-pointer" Overlap=true Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(_ => RemoveHomework(hw))">
                            <div class="px-2 w-100 py-1 avante dark-card grey-card cursor-pointer">
                                <MudText Typo="Typo.h6" Class="avante">@hw.Details</MudText>
                            </div>
                        </MudBadge>
                    </div>
                }
                
            }

            <MudButton Class="shifu-button col-11 avante mt-2" OnClick="OpenHomeWorkAddDialog">Добавить дзшку</MudButton>
        }

    </div>
</div>

@code {
    private bool _usersLoading;
    private bool _categoriesLoading;
    private bool _homeworksLoading;
    private string? _searchUsers;
    private string? _searchCategories;
    private IEnumerable<User> _users = Array.Empty<User>();
    private IEnumerable<Category> _categories = Array.Empty<Category>();
    private IEnumerable<HomeWork> _homeworks = Array.Empty<HomeWork>();

    protected override async Task OnInitializedAsync()
    {
        if (_users == Array.Empty<User>())
        {
            await LoadingHelper.Load(v => _usersLoading = v,
                async () => _users = await UserService.GetAllUsers(),
                StateHasChanged);
        }

        if (_categories == Array.Empty<Category>())
        {
            await LoadingHelper.Load(v => _categoriesLoading = v,
                async () => _categories = await CategoryService.GetCategories(),
                StateHasChanged);
        }

        if (_homeworks == Array.Empty<HomeWork>())
        {
            await LoadingHelper.Load(v => _homeworksLoading = v,
                async () => _homeworks = await HomeWorksService.GetAllHomeWorks(),
                StateHasChanged);
        }
        
    }

    public async Task OpenUserAddDialog()
    {
        var reference = await DialogService.ShowAsync<AddUserDialog>();
        var result = await reference.Result;

        if (result.Data is IEnumerable<User> usersForAdd)
        {
            try
            {
                _usersLoading = true;
                this.StateHasChanged();
                await UserService.AddUsers(usersForAdd);
                _users = await UserService.GetAllUsers();
                _usersLoading = false;
                this.StateHasChanged();
                Snackbar.Add("Пользователи добавлены!", Severity.Success);
            }
            catch (Refit.ValidationApiException apiExc)
            {
                Snackbar.Add("Произошла ошибка!", Severity.Error);
                await Logger.LogException(apiExc, "Cannot add user");
            }
            catch (Exception exc)
            {
                Snackbar.Add("Произошла ошибка!", Severity.Error);
                Logger.LogError(exc, "Cannot add user");
            }
            finally
            {
                _usersLoading = false;
            }
        }
    }

    public async Task RemoveUser(User user)
    {
        if (!(bool)(await DialogService.ShowMessageBox("Удалить пользователя", "Вы уверены?", "Да", "Нет")))
        {
            return;
        }
        if (user.Id == "1")
        {
            await DialogService.ShowMessageBox("Йоу, это админ", "Его нельзя удалять", "Ладно(");
            return;
        }
        _usersLoading = true;
        this.StateHasChanged();
        try
        {
            await UserService.DeleteUser(user);
            await Task.Delay(2000);
            _users = await UserService.GetAllUsers();
            _usersLoading = false;
            this.StateHasChanged();
            Snackbar.Add("Пользователь удален!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Произошла ошибка!", Severity.Error);
        }
        finally
        {
            _usersLoading = false;
        }
    }

    public async Task OpenCategoryAddDialog()
    {
        var reference = await DialogService.ShowAsync<AddCategoryDialog>();
        var result = await reference.Result;

        if (result.Data is Category category)
        {
            try
            {
                _categoriesLoading = true;
                this.StateHasChanged();
                await CategoryService.AddCategory(category);
                _categories = await CategoryService.GetCategories();
                _categoriesLoading = false;
                this.StateHasChanged();
                Snackbar.Add("Категория добавлена!", Severity.Success);
            }
            catch(Refit.ValidationApiException apiExc)
            {
                Snackbar.Add("Произошла ошибка!", Severity.Error);
                await Logger.LogException(apiExc, "Cannot add category");
            }
            catch(Exception exc)
            {
                Snackbar.Add("Произошла ошибка!", Severity.Error);
                Logger.LogError(exc, "Cannot add category");
            }
            finally
            {
                _categoriesLoading = false;
            }
        }
    }

    public async Task OpenHomeWorkAddDialog()
    {
        var reference = await DialogService.ShowAsync<AddHomeWorkDialog>();
        var result = await reference.Result;

        if (result.Data is HomeWork homeWork)
        {
            try
            {
                _homeworksLoading = true;
                this.StateHasChanged();
                await HomeWorksService.Create(homeWork);
                _homeworks = await HomeWorksService.GetAllHomeWorks();
                _homeworksLoading = false;
                this.StateHasChanged();
                Snackbar.Add("Дзшка добавлена!", Severity.Success);
            }
            catch (Refit.ValidationApiException apiExc)
            {
                Snackbar.Add("Произошла ошибка!", Severity.Error);
                await Logger.LogException(apiExc, "Cannot add Homework");

            }
            catch(Exception exc)
            {
                Snackbar.Add("Произошла ошибка!", Severity.Error);
                Logger.LogError(exc, "Cannot add Homework");
            }
            finally
            {
                _homeworksLoading = false;
            }
        }
    }

    public async Task RemoveCategory(Category category)
    {
        if (!(bool)(await DialogService.ShowMessageBox("Удалить модуль", "Вы уверены?", "Да", "Нет")))
        {
            return;
        }
        _categoriesLoading = true;
        this.StateHasChanged();
        try
        {
            await CategoryService.DeleteCategory(category);
            await Task.Delay(2000);
            _categories = await CategoryService.GetCategories();
            _categoriesLoading = false;
            this.StateHasChanged();
            Snackbar.Add("Категория удалена!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Произошла ошибка!", Severity.Error);
        }
        finally
        {
            _categoriesLoading = false;
        }
    }

    public async Task RemoveHomework(HomeWork homeWork)
    {
        if(!(bool)(await DialogService.ShowMessageBox("Удалить дз", "Вы уверены?", "Да", "Нет")))
        {
            return;
        }
        _homeworksLoading = true;
        this.StateHasChanged();
        try
        {
            await HomeWorksService.Delete(homeWork);
            await Task.Delay(2000);
            _homeworks = await HomeWorksService.GetAllHomeWorks();
            _homeworksLoading = false;
            this.StateHasChanged();
            Snackbar.Add("Дзшка удалена!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Произошла ошибка!", Severity.Error);
        }
        finally
        {
            _homeworksLoading = false;
        }
    }

    private string GetLastActivity(User user)
    {
        if (TrackingCircuitHandler.Users.Contains(user.Id))
        {
            return "онлайн";
        }

        var delta = DateTime.UtcNow - user.LastActivity;

        if (user.LastActivity == DateTime.MinValue)
        {
            return $"Был(а) в сети никогда";
        }

        if (delta.TotalHours < 1)
        {
            return $"Был(а) в сети {(int)delta.TotalMinutes} минут назад";
        }

        if (delta.TotalHours < 24)
        {
            return $"Был(а) в сети {(int)delta.TotalMinutes} часов назад";
        }

        return $"Был(а) в сети {(int)delta.TotalDays} дней назад";
    }
    }
